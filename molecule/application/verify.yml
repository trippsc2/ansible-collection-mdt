---
- name: Verify
  hosts:
    - subjects
  tasks:
    - name: Set testing GUID
      ansible.builtin.set_fact:
        _test_guid: "{{ '{' + 'test' | to_uuid | lower + '}' }}"

    - name: Attempt to not supply MDT share path
      trippsc2.mdt.application:
        type: bundle
        name: Test
        short_name: Test
        state: present
      register: _no_mdt_share_path
      ignore_errors: true

    - name: Verify that MDT share path is required
      ansible.builtin.assert:
        that:
          - _no_mdt_share_path is failed
          - '_no_mdt_share_path.msg == "missing required arguments: mdt_share_path"'
        fail_msg: MDT share path is required.
        success_msg: MDT share path is required.

    - name: Attempt to supply non-existent MDT share path
      trippsc2.mdt.application:
        mdt_share_path: C:\Test
        name: Test
        type: bundle
        short_name: Test
        state: present
      register: _nonexistent_mdt_share_path
      ignore_errors: true

    - name: Verify that previous task fails
      ansible.builtin.assert:
        that:
          - _nonexistent_mdt_share_path is failed
          - '_nonexistent_mdt_share_path.msg == "MDT share path ''C:\Test'' does not exist."'
        fail_msg: The task should fail when the MDT share path does not exist.
        success_msg: The task failed as expected when the MDT share path does not exist.

    - name: Attempt to not supply name or GUID
      trippsc2.mdt.application:
        mdt_share_path: C:\MDTShare
        type: bundle
        short_name: Test
        state: present
      register: _no_name_or_guid
      ignore_errors: true

    - name: Verify that name or GUID is required
      ansible.builtin.assert:
        that:
          - _no_name_or_guid is failed
          - '_no_name_or_guid.msg == "one of the following is required: name, guid"'
        fail_msg: Name or GUID is required.
        success_msg: Name or GUID is required.

    - name: Attempt to not supply type when state is present
      trippsc2.mdt.application:
        mdt_share_path: C:\MDTShare
        name: Test
        short_name: Test
        state: present
      register: _no_type
      ignore_errors: true

    - name: Verify that type is required when state is present
      ansible.builtin.assert:
        that:
          - _no_type is failed
          - '_no_type.msg == "state is present but all of the following are missing: type"'
        fail_msg: Type is required.
        success_msg: Type is required.

    - name: Attempt to not supply short name when state is present
      trippsc2.mdt.application:
        mdt_share_path: C:\MDTShare
        type: bundle
        name: Test
        state: present
      register: _no_short_name
      ignore_errors: true

    - name: Verify that short name is required when state is present
      ansible.builtin.assert:
        that:
          - _no_short_name is failed
          - '_no_short_name.msg == "state is present but all of the following are missing: short_name"'
        fail_msg: Short name is required.
        success_msg: Short name is required.

    - name: Attempt to supply name and GUID when state is absent
      trippsc2.mdt.application:
        mdt_share_path: C:\MDTShare
        name: Test
        guid: "{{ _test_guid }}"
        state: absent
      register: _name_and_guid
      ignore_errors: true

    - name: Verify that name and GUID cannot be supplied when state is absent
      ansible.builtin.assert:
        that:
          - _name_and_guid is failed
          - '_name_and_guid.msg == "The ''guid'' and ''name'' parameters are mutually exclusive when state is ''absent''."'
        fail_msg: Name and GUID cannot be supplied when state is absent.
        success_msg: Name and GUID cannot be supplied when state is absent.

    - name: Attempt to supply paths when state is absent
      trippsc2.mdt.application:
        mdt_share_path: C:\MDTShare
        name: Test
        paths:
          add:
            - Test
        state: absent
      register: _paths
      ignore_errors: true

    - name: Verify that paths cannot be supplied when state is absent
      ansible.builtin.assert:
        that:
          - _paths is failed
          - '_paths.msg == "The following parameters are invalid when state is absent: paths"'
        fail_msg: Paths cannot be supplied when state is absent.
        success_msg: Paths cannot be supplied when state is absent.

    - name: Attempt to supply type when state is absent
      trippsc2.mdt.application:
        mdt_share_path: C:\MDTShare
        type: bundle
        name: Test
        state: absent
      register: _type
      ignore_errors: true

    - name: Verify that type cannot be supplied when state is absent
      ansible.builtin.assert:
        that:
          - _type is failed
          - '_type.msg == "The following parameters are invalid when state is absent: type"'
        fail_msg: Type cannot be supplied when state is absent.
        success_msg: Type cannot be supplied when state is absent.

    - name: Attempt to supply publisher when state is absent
      trippsc2.mdt.application:
        mdt_share_path: C:\MDTShare
        name: Test
        publisher: Test
        state: absent
      register: _publisher
      ignore_errors: true

    - name: Verify that publisher cannot be supplied when state is absent
      ansible.builtin.assert:
        that:
          - _publisher is failed
          - '_publisher.msg == "The following parameters are invalid when state is absent: publisher"'
        fail_msg: Publisher cannot be supplied when state is absent.
        success_msg: Publisher cannot be supplied when state is absent.

    - name: Attempt to supply short name when state is absent
      trippsc2.mdt.application:
        mdt_share_path: C:\MDTShare
        short_name: Test
        name: Test
        state: absent
      register: _short_name
      ignore_errors: true

    - name: Verify that short name cannot be supplied when state is absent
      ansible.builtin.assert:
        that:
          - _short_name is failed
          - '_short_name.msg == "The following parameters are invalid when state is absent: short_name"'
        fail_msg: Short name cannot be supplied when state is absent.
        success_msg: Short name cannot be supplied when state is absent.

    - name: Attempt to supply version when state is absent
      trippsc2.mdt.application:
        mdt_share_path: C:\MDTShare
        name: Test
        version: '1.0.0'
        state: absent
      register: _version
      ignore_errors: true

    - name: Verify that version cannot be supplied when state is absent
      ansible.builtin.assert:
        that:
          - _version is failed
          - '_version.msg == "The following parameters are invalid when state is absent: version"'
        fail_msg: Version cannot be supplied when state is absent.
        success_msg: Version cannot be supplied when state is absent.

    - name: Attempt to supply language when state is absent
      trippsc2.mdt.application:
        mdt_share_path: C:\MDTShare
        name: Test
        language: en-US
        state: absent
      register: _language
      ignore_errors: true

    - name: Verify that language cannot be supplied when state is absent
      ansible.builtin.assert:
        that:
          - _language is failed
          - '_language.msg == "The following parameters are invalid when state is absent: language"'
        fail_msg: Language cannot be supplied when state is absent.
        success_msg: Language cannot be supplied when state is absent.

    - name: Attempt to supply command line when state is absent
      trippsc2.mdt.application:
        mdt_share_path: C:\MDTShare
        name: Test
        command_line: 'C:\Test\Test.exe'
        state: absent
      register: _command_line
      ignore_errors: true

    - name: Verify that command line cannot be supplied when state is absent
      ansible.builtin.assert:
        that:
          - _command_line is failed
          - '_command_line.msg == "The following parameters are invalid when state is absent: command_line"'
        fail_msg: Command line cannot be supplied when state is absent.
        success_msg: Command line cannot be supplied when state is absent.

    - name: Attempt to supply working directory when state is absent
      trippsc2.mdt.application:
        mdt_share_path: C:\MDTShare
        name: Test
        working_directory: 'C:\Test'
        state: absent
      register: _working_directory
      ignore_errors: true

    - name: Verify that working directory cannot be supplied when state is absent
      ansible.builtin.assert:
        that:
          - _working_directory is failed
          - '_working_directory.msg == "The following parameters are invalid when state is absent: working_directory"'
        fail_msg: Working directory cannot be supplied when state is absent.
        success_msg: Working directory cannot be supplied when state is absent.

    - name: Attempt to supply source path when state is absent
      trippsc2.mdt.application:
        mdt_share_path: C:\MDTShare
        name: Test
        source_path: 'C:\Test'
        state: absent
      register: _source_path
      ignore_errors: true

    - name: Verify that source path cannot be supplied when state is absent
      ansible.builtin.assert:
        that:
          - _source_path is failed
          - '_source_path.msg == "The following parameters are invalid when state is absent: source_path"'
        fail_msg: Source path cannot be supplied when state is absent.
        success_msg: Source path cannot be supplied when state is absent.

    - name: Attempt to supply destination folder when state is absent
      trippsc2.mdt.application:
        mdt_share_path: C:\MDTShare
        name: Test
        destination_folder: 'C:\Test'
        state: absent
      register: _destination_folder
      ignore_errors: true

    - name: Verify that destination folder cannot be supplied when state is absent
      ansible.builtin.assert:
        that:
          - _destination_folder is failed
          - '_destination_folder.msg == "The following parameters are invalid when state is absent: destination_folder"'
        fail_msg: Destination folder cannot be supplied when state is absent.
        success_msg: Destination folder cannot be supplied when state is absent.

    - name: Attempt to supply comments when state is absent
      trippsc2.mdt.application:
        mdt_share_path: C:\MDTShare
        name: Test
        comments: Test
        state: absent
      register: _comments
      ignore_errors: true

    - name: Verify that comments cannot be supplied when state is absent
      ansible.builtin.assert:
        that:
          - _comments is failed
          - '_comments.msg == "The following parameters are invalid when state is absent: comments"'
        fail_msg: Comments cannot be supplied when state is absent.
        success_msg: Comments cannot be supplied when state is absent.

    - name: Attempt to supply enabled when state is absent
      trippsc2.mdt.application:
        mdt_share_path: C:\MDTShare
        name: Test
        enabled: false
        state: absent
      register: _enabled
      ignore_errors: true

    - name: Verify that enabled cannot be supplied when state is absent
      ansible.builtin.assert:
        that:
          - _enabled is failed
          - '_enabled.msg == "The following parameters are invalid when state is absent: enabled"'
        fail_msg: Enabled cannot be supplied when state is absent.
        success_msg: Enabled cannot be supplied when state is absent.
    
    - name: Attempt to supply hidden when state is absent
      trippsc2.mdt.application:
        mdt_share_path: C:\MDTShare
        name: Test
        hidden: true
        state: absent
      register: _hidden
      ignore_errors: true

    - name: Verify that hidden cannot be supplied when state is absent
      ansible.builtin.assert:
        that:
          - _hidden is failed
          - '_hidden.msg == "The following parameters are invalid when state is absent: hidden"'
        fail_msg: Hidden cannot be supplied when state is absent.
        success_msg: Hidden cannot be supplied when state is absent.

    - name: Attempt to supply reboot when state is absent
      trippsc2.mdt.application:
        mdt_share_path: C:\MDTShare
        name: Test
        reboot: true
        state: absent
      register: _reboot
      ignore_errors: true

    - name: Verify that reboot cannot be supplied when state is absent
      ansible.builtin.assert:
        that:
          - _reboot is failed
          - '_reboot.msg == "The following parameters are invalid when state is absent: reboot"'
        fail_msg: Reboot cannot be supplied when state is absent.
        success_msg: Reboot cannot be supplied when state is absent.

    - name: Attempt to add and set paths
      trippsc2.mdt.application:
        mdt_share_path: C:\MDTShare
        type: bundle
        name: Test
        short_name: Test
        paths:
          add:
            - Test
          set:
            - Test2
        state: present
      register: _add_and_set_paths
      ignore_errors: true

    - name: Verify that add and set paths cannot be supplied together
      ansible.builtin.assert:
        that:
          - _add_and_set_paths is failed
          - '_add_and_set_paths.msg == "parameters are mutually exclusive: add, set found in paths"'
        fail_msg: Add and set paths cannot be supplied together.
        success_msg: Add and set paths cannot be supplied together.

    - name: Attempt to remove and set paths
      trippsc2.mdt.application:
        mdt_share_path: C:\MDTShare
        type: bundle
        name: Test
        short_name: Test
        paths:
          remove:
            - Test
          set:
            - Test2
        state: present
      register: _remove_and_set_paths
      ignore_errors: true

    - name: Verify that remove and set paths cannot be supplied together
      ansible.builtin.assert:
        that:
          - _remove_and_set_paths is failed
          - '_remove_and_set_paths.msg == "parameters are mutually exclusive: remove, set found in paths"'
        fail_msg: Remove and set paths cannot be supplied together.
        success_msg: Remove and set paths cannot be supplied together.

    - name: Attempt to supply empty add paths
      trippsc2.mdt.application:
        mdt_share_path: C:\MDTShare
        type: bundle
        name: Test
        short_name: Test
        paths:
          add: []
        state: present
      register: _empty_add_paths
      ignore_errors: true

    - name: Verify that add paths cannot be empty
      ansible.builtin.assert:
        that:
          - _empty_add_paths is failed
          - '_empty_add_paths.msg == "The ''paths.add'' parameter must contain at least one path, if provided."'
        fail_msg: Add paths cannot be empty.
        success_msg: Add paths cannot be empty.

    - name: Attempt to supply empty remove paths
      trippsc2.mdt.application:
        mdt_share_path: C:\MDTShare
        type: bundle
        name: Test
        short_name: Test
        paths:
          remove: []
        state: present
      register: _empty_remove_paths
      ignore_errors: true

    - name: Verify that remove paths cannot be empty
      ansible.builtin.assert:
        that:
          - _empty_remove_paths is failed
          - '_empty_remove_paths.msg == "The ''paths.remove'' parameter must contain at least one path, if provided."'
        fail_msg: Remove paths cannot be empty.
        success_msg: Remove paths cannot be empty.

    - name: Attempt to supply empty set paths
      trippsc2.mdt.application:
        mdt_share_path: C:\MDTShare
        type: bundle
        name: Test
        short_name: Test
        paths:
          set: []
        state: present
      register: _empty_set_paths
      ignore_errors: true

    - name: Verify that set paths cannot be empty
      ansible.builtin.assert:
        that:
          - _empty_set_paths is failed
          - '_empty_set_paths.msg == "The ''paths'' parameter would remove the application."'
        fail_msg: Set paths cannot be empty.
        success_msg: Set paths cannot be empty.

    - name: Attempt to remove only path that does not exist
      trippsc2.mdt.application:
        mdt_share_path: C:\MDTShare
        type: bundle
        name: Test
        short_name: Test
        paths:
          remove:
            - ''
        state: present
      register: _remove_only_path
      ignore_errors: true

    - name: Verify that remove only path that does not exist fails
      ansible.builtin.assert:
        that:
          - _remove_only_path is failed
          - '_remove_only_path.msg == "The ''paths'' parameter would remove the application."'
        fail_msg: Remove only path that does not exist fails.
        success_msg: Remove only path that does not exist fails.

    - name: Attempt to add nonexistent path
      trippsc2.mdt.application:
        mdt_share_path: C:\MDTShare
        type: bundle
        name: Test
        short_name: Test
        paths:
          add:
            - Test
        state: present
      register: _add_nonexistent_path
      ignore_errors: true

    - name: Verify that add nonexistent path fails
      ansible.builtin.assert:
        that:
          - _add_nonexistent_path is failed
          - '_add_nonexistent_path.msg == "The directory ''Applications\Test'' does not exist in the MDT share."'
        fail_msg: Add nonexistent path fails.
        success_msg: Add nonexistent path fails.

    - name: Attempt to set nonexistent path
      trippsc2.mdt.application:
        mdt_share_path: C:\MDTShare
        type: bundle
        name: Test
        short_name: Test
        paths:
          set:
            - Test
        state: present
      register: _set_nonexistent_path
      ignore_errors: true

    - name: Verify that set nonexistent path fails
      ansible.builtin.assert:
        that:
          - _set_nonexistent_path is failed
          - '_set_nonexistent_path.msg == "The directory ''Applications\\Test'' does not exist in the MDT share."'
        fail_msg: Add nonexistent path fails.
        success_msg: Add nonexistent path fails.
        
    - name: Attempt to supply same path as add path and remove path
      trippsc2.mdt.application:
        mdt_share_path: C:\MDTShare
        type: bundle
        name: Test
        short_name: Test
        paths:
          add:
            - Test
          remove:
            - Test
        state: present
      register: _same_path
      ignore_errors: true

    - name: Verify that same path cannot be supplied as add path and remove path
      ansible.builtin.assert:
        that:
          - _same_path is failed
          - '_same_path.msg == "The ''paths.add'' and ''paths.remove'' parameters must not contain the same path(s)."'
        fail_msg: Same path cannot be supplied as add path and remove path.
        success_msg: Same path cannot be supplied as add path and remove path.

    - name: Attempt to not supply command line when type is no source
      trippsc2.mdt.application:
        mdt_share_path: C:\MDTShare
        type: no_source
        name: Test
        short_name: Test
        state: present
      register: _no_command_line
      ignore_errors: true

    - name: Verify that command line is required when type is no source
      ansible.builtin.assert:
        that:
          - _no_command_line is failed
          - '_no_command_line.msg == "The ''command_line'' parameter is required for the ''no_source'' application type."'
        fail_msg: Command line is required when type is no source.
        success_msg: Command line is required when type is no source.

    - name: Attempt to not supply command line when type is source
      trippsc2.mdt.application:
        mdt_share_path: C:\MDTShare
        type: source
        name: Test
        short_name: Test
        state: present
      register: _no_command_line
      ignore_errors: true

    - name: Verify that command line is required when type is no source
      ansible.builtin.assert:
        that:
          - _no_command_line is failed
          - '_no_command_line.msg == "The ''command_line'' parameter is required for the ''source'' application type."'
        fail_msg: Command line is required when type is no source.
        success_msg: Command line is required when type is no source.

    - name: Attempt to not supply source path when type is source
      trippsc2.mdt.application:
        mdt_share_path: C:\MDTShare
        type: source
        name: Test
        short_name: Test
        command_line: 'C:\Test\Test.exe'
        state: present
      register: _no_source_path
      ignore_errors: true

    - name: Verify that source path is required when type is source
      ansible.builtin.assert:
        that:
          - _no_source_path is failed
          - '_no_source_path.msg == "The ''source_path'' parameter is required for the ''source'' application type."'
        fail_msg: Source path is required when type is source.
        success_msg: Source path is required when type is source.

    - name: Attempt to supply source path when type is bundle
      trippsc2.mdt.application:
        mdt_share_path: C:\MDTShare
        type: bundle
        name: Test
        short_name: Test
        source_path: 'C:\Test'
        state: present
      register: _source_path
      ignore_errors: true

    - name: Verify that source path cannot be supplied when type is bundle
      ansible.builtin.assert:
        that:
          - _source_path is failed
          - '_source_path.msg == "The following parameters are invalid for the ''bundle'' application type: source_path"'
        fail_msg: Source path cannot be supplied when type is bundle.
        success_msg: Source path cannot be supplied when type is bundle.

    - name: Attempt to supply destination folder when type is bundle
      trippsc2.mdt.application:
        mdt_share_path: C:\MDTShare
        type: bundle
        name: Test
        short_name: Test
        destination_folder: 'Test'
        state: present
      register: _destination_folder
      ignore_errors: true

    - name: Verify that destination folder cannot be supplied when type is bundle
      ansible.builtin.assert:
        that:
          - _destination_folder is failed
          - '_destination_folder.msg == "The following parameters are invalid for the ''bundle'' application type: destination_folder"'
        fail_msg: Destination folder cannot be supplied when type is bundle.
        success_msg: Destination folder cannot be supplied when type is bundle.

    - name: Attempt to source path when type is no source
      trippsc2.mdt.application:
        mdt_share_path: C:\MDTShare
        type: no_source
        name: Test
        short_name: Test
        source_path: 'C:\Test'
        command_line: 'C:\Test\Test.exe'
        state: present
      register: _source_path
      ignore_errors: true

    - name: Verify that source path cannot be supplied when type is no source
      ansible.builtin.assert:
        that:
          - _source_path is failed
          - '_source_path.msg == "The following parameters are invalid for the ''no_source'' application type: source_path"'
        fail_msg: Source path cannot be supplied when type is no source.
        success_msg: Source path cannot be supplied when type is no source.

    - name: Attempt to supply destination folder when type is no source
      trippsc2.mdt.application:
        mdt_share_path: C:\MDTShare
        type: no_source
        name: Test
        short_name: Test
        destination_folder: 'Test'
        command_line: 'C:\Test\Test.exe'
        state: present
      register: _destination_folder
      ignore_errors: true

    - name: Verify that destination folder cannot be supplied when type is no source
      ansible.builtin.assert:
        that:
          - _destination_folder is failed
          - '_destination_folder.msg == "The following parameters are invalid for the ''no_source'' application type: destination_folder"'
        fail_msg: Destination folder cannot be supplied when type is no source.
        success_msg: Destination folder cannot be supplied when type is no source.

    - name: Attempt to supply command line when type is bundle
      trippsc2.mdt.application:
        mdt_share_path: C:\MDTShare
        type: bundle
        name: Test
        short_name: Test
        command_line: 'C:\Test\Test.exe'
        state: present
      register: _command_line
      ignore_errors: true

    - name: Verify that command line cannot be supplied when type is bundle
      ansible.builtin.assert:
        that:
          - _command_line is failed
          - '_command_line.msg == "The following parameters are invalid for the ''bundle'' application type: command_line"'
        fail_msg: Command line cannot be supplied when type is bundle.
        success_msg: Command line cannot be supplied when type is bundle.
