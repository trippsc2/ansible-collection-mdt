---
- name: Verify
  hosts:
    - subjects
  tasks:
    - name: Attempt to not supply MDT share path
      trippsc2.mdt.selection_profile:
        name: Test
        state: absent
      register: _no_mdt_share_path
      ignore_errors: true

    - name: Verify that MDT share path is required
      ansible.builtin.assert:
        that:
          - _no_mdt_share_path is failed
          - '_no_mdt_share_path.msg == "missing required arguments: mdt_share_path"'
        fail_msg: MDT share path is required.
        success_msg: MDT share path is required.

    - name: Attempt to supply non-existent MDT share path
      trippsc2.mdt.selection_profile:
        mdt_share_path: C:\Test
        name: Test
        state: absent
      register: _nonexistent_mdt_share_path
      ignore_errors: true

    - name: Verify that previous task fails
      ansible.builtin.assert:
        that:
          - _nonexistent_mdt_share_path is failed
          - '_nonexistent_mdt_share_path.msg == "MDT share path ''C:\Test'' does not exist."'
        fail_msg: The task should fail when the MDT share path does not exist.
        success_msg: The task failed as expected when the MDT share path does not exist.

    - name: Attempt to supply no name for present state
      trippsc2.mdt.selection_profile:
        mdt_share_path: C:\MDTShare
        guid: '{12345678-1234-1234-1234-123456789012}'
        definition_paths:
          set: []
        state: present
      register: _no_name
      ignore_errors: true

    - name: Verify that the module fails when no name is supplied
      ansible.builtin.assert:
        that:
          - _no_name is failed
          - '_no_name.msg == "state is present but all of the following are missing: name"'
        fail_msg: The module did not fail when no name was supplied.
        success_msg: The module failed when no name was supplied, as expected.

    - name: Attempt to not supply definition paths for present state
      trippsc2.mdt.selection_profile:
        mdt_share_path: C:\MDTShare
        name: Test
        state: present
      register: _no_definition_paths
      ignore_errors: true

    - name: Verify that the module fails when no definition paths are supplied
      ansible.builtin.assert:
        that:
          - _no_definition_paths is failed
          - '_no_definition_paths.msg == "state is present but all of the following are missing: definition_paths"'
        fail_msg: The module did not fail when no definition paths were supplied.
        success_msg: The module failed when no definition paths were supplied, as expected.

    - name: Attempt to add and set definition paths
      trippsc2.mdt.selection_profile:
        mdt_share_path: C:\MDTShare
        name: Test
        definition_paths:
          add:
            - Applications
          set:
            - Operating Systems
        state: present
      register: _add_and_set_paths
      ignore_errors: true

    - name: Verify that add and set paths cannot be supplied together
      ansible.builtin.assert:
        that:
          - _add_and_set_paths is failed
          - '_add_and_set_paths.msg == "parameters are mutually exclusive: add, set found in definition_paths"'
        fail_msg: Add and set paths cannot be supplied together.
        success_msg: Add and set paths cannot be supplied together.

    - name: Attempt to remove and set paths
      trippsc2.mdt.selection_profile:
        mdt_share_path: C:\MDTShare
        name: Test
        definition_paths:
          remove:
            - Applications
          set:
            - Operating Systems
        state: present
      register: _remove_and_set_paths
      ignore_errors: true

    - name: Verify that remove and set paths cannot be supplied together
      ansible.builtin.assert:
        that:
          - _remove_and_set_paths is failed
          - '_remove_and_set_paths.msg == "parameters are mutually exclusive: remove, set found in definition_paths"'
        fail_msg: Remove and set paths cannot be supplied together.
        success_msg: Remove and set paths cannot be supplied together.

    - name: Attempt to add and remove the same path
      trippsc2.mdt.selection_profile:
        mdt_share_path: C:\MDTShare
        name: Test
        definition_paths:
          add:
            - Applications
          remove:
            - Applications
        state: present
      register: _add_and_remove_same_path
      ignore_errors: true

    - name: Verify that add and removes paths cannot be supplied the same paths
      ansible.builtin.assert:
        that:
          - _add_and_remove_same_path is failed
          - '_add_and_remove_same_path.msg == "The ''definition_paths.add'' and ''definition_paths.remove'' parameters must not contain the same path(s)."'
        fail_msg: Add and set paths cannot be supplied the same paths.
        success_msg: Add and set paths cannot be supplied the same paths.

    - name: Attempt to supply empty add paths
      trippsc2.mdt.selection_profile:
        mdt_share_path: C:\MDTShare
        name: Test
        definition_paths:
          add: []
        state: present
      register: _empty_add_paths
      ignore_errors: true

    - name: Verify that add paths cannot be empty
      ansible.builtin.assert:
        that:
          - _empty_add_paths is failed
          - '_empty_add_paths.msg == "The ''definition_paths.add'' parameter must contain at least one path, if provided."'
        fail_msg: Add paths cannot be empty.
        success_msg: Add paths cannot be empty.

    - name: Attempt to supply empty remove paths
      trippsc2.mdt.selection_profile:
        mdt_share_path: C:\MDTShare
        name: Test
        definition_paths:
          remove: []
        state: present
      register: _empty_remove_paths
      ignore_errors: true

    - name: Verify that remove paths cannot be empty
      ansible.builtin.assert:
        that:
          - _empty_remove_paths is failed
          - '_empty_remove_paths.msg == "The ''definition_paths.remove'' parameter must contain at least one path, if provided."'
        fail_msg: Remove paths cannot be empty.
        success_msg: Remove paths cannot be empty.

    - name: Attempt to supply both name and GUID for absent state
      trippsc2.mdt.selection_profile:
        mdt_share_path: C:\MDTShare
        name: Test
        guid: '{12345678-1234-1234-1234-123456789012}'
        state: absent
      register: _both_name_and_guid
      ignore_errors: true

    - name: Verify that the module fails when both name and GUID are supplied
      ansible.builtin.assert:
        that:
          - _both_name_and_guid is failed
          - '_both_name_and_guid.msg == "The ''guid'' and ''name'' parameters are mutually exclusive when state is ''absent''."'
        fail_msg: The module did not fail when both name and GUID were supplied.
        success_msg: The module failed when both name and GUID were supplied, as expected.

    - name: Attempt to supply definition paths for absent state
      trippsc2.mdt.selection_profile:
        mdt_share_path: C:\MDTShare
        name: Test
        definition_paths:
          set: []
        state: absent
      register: _definition_paths_absent
      ignore_errors: true

    - name: Verify that the module fails when definition paths are supplied for absent state
      ansible.builtin.assert:
        that:
          - _definition_paths_absent is failed
          - '_definition_paths_absent.msg == "The following parameters are invalid when state is absent: definition_paths"'
        fail_msg: The module did not fail when definition paths were supplied for absent state.
        success_msg: The module failed when definition paths were supplied for absent state, as expected.

    - name: Attempt to supply enabled for absent state
      trippsc2.mdt.selection_profile:
        mdt_share_path: C:\MDTShare
        name: Test
        enabled: true
        state: absent
      register: _enabled_absent
      ignore_errors: true

    - name: Verify that the module fails when enabled is supplied for absent state
      ansible.builtin.assert:
        that:
          - _enabled_absent is failed
          - '_enabled_absent.msg == "The following parameters are invalid when state is absent: enabled"'
        fail_msg: The module did not fail when enabled was supplied for absent state.
        success_msg: The module failed when enabled was supplied for absent state, as expected.

    - name: Attempt to supply hidden for absent state
      trippsc2.mdt.selection_profile:
        mdt_share_path: C:\MDTShare
        name: Test
        hidden: false
        state: absent
      register: _hidden_absent
      ignore_errors: true

    - name: Verify that the module fails when hidden is supplied for absent state
      ansible.builtin.assert:
        that:
          - _hidden_absent is failed
          - '_hidden_absent.msg == "The following parameters are invalid when state is absent: hidden"'
        fail_msg: The module did not fail when hidden was supplied for absent state.
        success_msg: The module failed when hidden was supplied for absent state, as expected.

    - name: Attempt to change read-only selection profile
      trippsc2.mdt.selection_profile:
        mdt_share_path: C:\MDTShare
        name: Nothing
        definition_paths:
          set: []
        state: present
      register: _read_only
      ignore_errors: true

    - name: Verify that the module fails when changing a read-only selection profile
      ansible.builtin.assert:
        that:
          - _read_only is failed
          - '_read_only.msg == "The selection profile is read-only."'
        fail_msg: The module did not fail when changing a read-only selection profile.
        success_msg: The module failed when changing a read-only selection profile, as expected.

    - name: Attempt to remove read-only selection profile
      trippsc2.mdt.selection_profile:
        mdt_share_path: C:\MDTShare
        name: Nothing
        state: absent
      register: _read_only_remove
      ignore_errors: true

    - name: Verify that the module fails when changing a read-only selection profile
      ansible.builtin.assert:
        that:
          - _read_only_remove is failed
          - '_read_only_remove.msg == "The selection profile is read-only."'
        fail_msg: The module did not fail when changing a read-only selection profile.
        success_msg: The module failed when changing a read-only selection profile, as expected.
